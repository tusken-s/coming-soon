!(function (t) {
  (t._spritely = {
    animate: function (e) {
      var s = t(e.el),
        i = s.attr("id");
      if (!t._spritely.instances[i]) return this;
      if (
        ((e = t.extend(e, t._spritely.instances[i] || {})).play_frames &&
          !t._spritely.instances[i].remaining_frames &&
          (t._spritely.instances[i].remaining_frames = e.play_frames + 1),
        "sprite" == e.type && e.fps)
      ) {
        var n,
          r = function (s) {
            var r = e.width;
            if ((e.height, !n)) {
              (n = []), (total = 0);
              for (var a = 0; a < e.no_of_frames; a++)
                (n[n.length] = 0 - total), (total += r);
            }
            !0 == e.rewind
              ? t._spritely.instances[i].current_frame <= 0
                ? (t._spritely.instances[i].current_frame = n.length - 1)
                : (t._spritely.instances[i].current_frame =
                    t._spritely.instances[i].current_frame - 1)
              : t._spritely.instances[i].current_frame >= n.length - 1
                ? (t._spritely.instances[i].current_frame = 0)
                : (t._spritely.instances[i].current_frame =
                    t._spritely.instances[i].current_frame + 1);
            var p = t._spritely.getBgY(s);
            if (
              (s.css(
                "background-position",
                n[t._spritely.instances[i].current_frame] + "px " + p,
              ),
              e.bounce && e.bounce[0] > 0 && e.bounce[1] > 0)
            ) {
              var c = e.bounce[0],
                o = e.bounce[1],
                l = e.bounce[2];
              s.animate(
                { top: "+=" + c + "px", left: "-=" + o + "px" },
                l,
              ).animate({ top: "-=" + c + "px", left: "+=" + o + "px" }, l);
            }
          };
        if (
          t._spritely.instances[i].remaining_frames &&
          t._spritely.instances[i].remaining_frames > 0
        ) {
          if (
            (t._spritely.instances[i].remaining_frames--,
            0 == t._spritely.instances[i].remaining_frames)
          ) {
            (t._spritely.instances[i].remaining_frames = -1),
              delete t._spritely.instances[i].remaining_frames;
            return;
          }
          r(s);
        } else -1 != t._spritely.instances[i].remaining_frames && r(s);
      } else if ("pan" == e.type && !t._spritely.instances[i]._stopped) {
        "up" == e.dir
          ? ((t._spritely.instances[i].l = t._spritely
              .getBgX(s)
              .replace("px", "")),
            (t._spritely.instances[i].t =
              t._spritely.instances[i].t - (e.speed || 1) || 0))
          : "down" == e.dir
            ? ((t._spritely.instances[i].l = t._spritely
                .getBgX(s)
                .replace("px", "")),
              (t._spritely.instances[i].t =
                t._spritely.instances[i].t + (e.speed || 1) || 0))
            : "left" == e.dir
              ? ((t._spritely.instances[i].l =
                  t._spritely.instances[i].l - (e.speed || 1) || 0),
                (t._spritely.instances[i].t = t._spritely
                  .getBgY(s)
                  .replace("px", "")))
              : ((t._spritely.instances[i].l =
                  t._spritely.instances[i].l + (e.speed || 1) || 0),
                (t._spritely.instances[i].t = t._spritely
                  .getBgY(s)
                  .replace("px", "")));
        var a = t._spritely.instances[i].l.toString();
        -1 == a.indexOf("%") ? (a += "px ") : (a += " ");
        var p = t._spritely.instances[i].t.toString();
        -1 == p.indexOf("%") ? (p += "px ") : (p += " "),
          t(s).css("background-position", a + p);
      }
      (t._spritely.instances[i].options = e),
        window.setTimeout(
          function () {
            t._spritely.animate(e);
          },
          parseInt(1e3 / e.fps),
        );
    },
    randomIntBetween: function (t, e) {
      return parseInt(
        (rand_no = Math.floor((e - (t - 1)) * Math.random()) + t),
      );
    },
    getBgY: function (e) {
      if (t.browser.msie) var s = t(e).css("background-position-y") || "0";
      else var s = (t(e).css("background-position") || " ").split(" ")[1];
      return s;
    },
    getBgX: function (e) {
      if (t.browser.msie) var s = t(e).css("background-position-x") || "0";
      else var s = (t(e).css("background-position") || " ").split(" ")[0];
      return s;
    },
    get_rel_pos: function (t, e) {
      var s = t;
      if (t < 0) for (; s < 0; ) s += e;
      else for (; s > e; ) s -= e;
      return s;
    },
  }),
    t.fn.extend({
      spritely: function (e) {
        var e = t.extend(
            {
              type: "sprite",
              do_once: !1,
              width: null,
              height: null,
              fps: 12,
              no_of_frames: 2,
              stop_after: null,
            },
            e || {},
          ),
          s = t(this).attr("id");
        return (
          t._spritely.instances || (t._spritely.instances = {}),
          t._spritely.instances[s] ||
            (t._spritely.instances[s] = { current_frame: -1 }),
          (t._spritely.instances[s].type = e.type),
          (t._spritely.instances[s].depth = e.depth),
          (e.el = this),
          (e.width = e.width || t(this).width() || 100),
          (e.height = e.height || t(this).height() || 100),
          e.do_once
            ? t._spritely.animate(e)
            : window.setTimeout(
                function () {
                  t._spritely.animate(e);
                },
                (e.fps, parseInt(1e3 / e.fps)),
              ),
          this
        );
      },
      sprite: function (e) {
        var e = t.extend({ type: "sprite", bounce: [0, 0, 1e3] }, e || {});
        return t(this).spritely(e);
      },
      pan: function (e) {
        var e = t.extend(
          { type: "pan", dir: "left", continuous: !0, speed: 1 },
          e || {},
        );
        return t(this).spritely(e);
      },
      flyToTap: function (e) {
        var e = t.extend(
          { el_to_move: null, type: "moveToTap", ms: 1e3, do_once: !0 },
          e || {},
        );
        return (
          e.el_to_move && t(e.el_to_move).active(),
          t._spritely.activeSprite &&
            (window.Touch
              ? (t(this)[0].ontouchstart = function (e) {
                  var s = t._spritely.activeSprite,
                    i = e.touches[0],
                    n = i.pageY - s.height() / 2,
                    r = i.pageX - s.width() / 2;
                  s.animate({ top: n + "px", left: r + "px" }, 1e3);
                })
              : t(this).click(function (e) {
                  var s = t._spritely.activeSprite;
                  t(s).stop(!0);
                  var i = s.width(),
                    n = s.height(),
                    r = e.pageX - i / 2,
                    a = e.pageY - n / 2;
                  s.animate({ top: a + "px", left: r + "px" }, 1e3);
                })),
          this
        );
      },
      isDraggable: function (e) {
        if (!t(this).draggable) return this;
        var e = t.extend(
            { type: "isDraggable", start: null, stop: null, drag: null },
            e || {},
          ),
          s = t(this).attr("id");
        return (
          t._spritely.instances[s] &&
            ((t._spritely.instances[s].isDraggableOptions = e),
            t(this).draggable({
              start: function () {
                var e = t(this).attr("id");
                (t._spritely.instances[e].stop_random = !0),
                  t(this).stop(!0),
                  t._spritely.instances[e].isDraggableOptions.start &&
                    t._spritely.instances[e].isDraggableOptions.start(this);
              },
              drag: e.drag,
              stop: function () {
                var e = t(this).attr("id");
                (t._spritely.instances[e].stop_random = !1),
                  t._spritely.instances[e].isDraggableOptions.stop &&
                    t._spritely.instances[e].isDraggableOptions.stop(this);
              },
            })),
          this
        );
      },
      active: function () {
        return (t._spritely.activeSprite = this), this;
      },
      activeOnClick: function () {
        var e = t(this);
        return (
          window.Touch
            ? (e[0].ontouchstart = function (s) {
                t._spritely.activeSprite = e;
              })
            : e.click(function (s) {
                t._spritely.activeSprite = e;
              }),
          this
        );
      },
      spRandom: function (e) {
        var e = t.extend(
            {
              top: 50,
              left: 50,
              right: 290,
              bottom: 320,
              speed: 4e3,
              pause: 0,
            },
            e || {},
          ),
          s = t(this).attr("id");
        if (!t._spritely.instances[s]) return this;
        if (!t._spritely.instances[s].stop_random) {
          var i = t._spritely.randomIntBetween,
            n = i(e.top, e.bottom),
            r = i(e.left, e.right);
          t("#" + s).animate({ top: n + "px", left: r + "px" }, e.speed);
        }
        return (
          window.setTimeout(function () {
            t("#" + s).spRandom(e);
          }, e.speed + e.pause),
          this
        );
      },
      makeAbsolute: function () {
        return this.each(function () {
          var e = t(this),
            s = e.position();
          e.css({
            position: "absolute",
            marginLeft: 0,
            marginTop: 0,
            top: s.top,
            left: s.left,
          })
            .remove()
            .appendTo("body");
        });
      },
      spSet: function (e, s) {
        var i = t(this).attr("id");
        return (t._spritely.instances[i][e] = s), this;
      },
      spGet: function (e, s) {
        var i = t(this).attr("id");
        return t._spritely.instances[i][e];
      },
      spStop: function (e) {
        return (
          t(this).each(function () {
            var s = t(this).attr("id");
            if (
              ((t._spritely.instances[s]._last_fps = t(this).spGet("fps")),
              (t._spritely.instances[s]._stopped = !0),
              (t._spritely.instances[s]._stopped_f1 = e),
              "sprite" == t._spritely.instances[s].type &&
                t(this).spSet("fps", 0),
              e)
            ) {
              var i = t._spritely.getBgY(t(this));
              t(this).css("background-position", "0 " + i);
            }
          }),
          this
        );
      },
      spStart: function () {
        return (
          t(this).each(function () {
            var e = t(this).attr("id"),
              s = t._spritely.instances[e]._last_fps || 12;
            (t._spritely.instances[e]._stopped = !1),
              "sprite" == t._spritely.instances[e].type &&
                t(this).spSet("fps", s);
          }),
          this
        );
      },
      spToggle: function () {
        var e = t(this).attr("id"),
          s = t._spritely.instances[e]._stopped || !1,
          i = t._spritely.instances[e]._stopped_f1 || !1;
        return s ? t(this).spStart() : t(this).spStop(i), this;
      },
      fps: function (e) {
        return (
          t(this).each(function () {
            t(this).spSet("fps", e);
          }),
          this
        );
      },
      spSpeed: function (e) {
        return (
          t(this).each(function () {
            t(this).spSet("speed", e);
          }),
          this
        );
      },
      spRelSpeed: function (e) {
        return (
          t(this).each(function () {
            var s = t(this).spGet("depth") / 100;
            t(this).spSet("speed", e * s);
          }),
          this
        );
      },
      spChangeDir: function (e) {
        return (
          t(this).each(function () {
            t(this).spSet("dir", e);
          }),
          this
        );
      },
      spState: function (e) {
        return (
          t(this).each(function () {
            var s = (e - 1) * t(this).height() + "px",
              i = t._spritely.getBgX(t(this));
            t(this).css("background-position", i + " -" + s);
          }),
          this
        );
      },
      lockTo: function (e, s) {
        return (
          t(this).each(function () {
            var i = t(this).attr("id");
            if (!t._spritely.instances[i]) return this;
            (t._spritely.instances[i].locked_el = t(this)),
              (t._spritely.instances[i].lock_to = t(e)),
              (t._spritely.instances[i].lock_to_options = s),
              window.setInterval(function () {
                if (t._spritely.instances[i].lock_to) {
                  var e = t._spritely.instances[i].locked_el,
                    s = t._spritely.instances[i].lock_to,
                    n = t._spritely.instances[i].lock_to_options,
                    r = n.bg_img_width;
                  s.height();
                  var a = t._spritely.getBgY(s),
                    p = t._spritely.getBgX(s),
                    c = parseInt(p) + parseInt(n.left),
                    o = parseInt(a) + parseInt(n.top);
                  (c = t._spritely.get_rel_pos(c, r)),
                    t(e).css({ top: o + "px", left: c + "px" });
                }
              }, s.interval || 20);
          }),
          this
        );
      },
      destroy: function () {
        t(this);
        var e = t(this).attr("id");
        return delete t._spritely.instances[e], this;
      },
    });
})(jQuery);
try {
  document.execCommand("BackgroundImageCache", !1, !0);
} catch (t) {}
